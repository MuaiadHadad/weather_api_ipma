from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from app.routers import forecast, warnings, seismic, marine, stations, agriculture
import logging

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Criar inst√¢ncia da aplica√ß√£o FastAPI
app = FastAPI(
    title="Weather API IPMA - Completa",
    description="""
    API COMPLETA para todos os recursos do IPMA (Instituto Portugu√™s do Mar e da Atmosfera)
    
    ## üå§Ô∏è Recursos Dispon√≠veis:
    
    ### Previs√µes Meteorol√≥gicas
    - Previs√£o di√°ria at√© 5 dias por localidade
    - Previs√£o por data espec√≠fica
    - Lista de distritos e localidades
    
    ### ‚ö†Ô∏è Avisos Meteorol√≥gicos
    - Avisos at√© 3 dias (verde, amarelo, laranja, vermelho)
    - Filtragem por n√≠vel de severidade
    
    ### üåä Dados Mar√≠timos
    - Estado do mar at√© 3 dias
    - Risco de inc√™ndio at√© 2 dias
    - √çndice ultravioleta at√© 3 dias
    
    ### üè† Dados S√≠smicos
    - Eventos s√≠smicos √∫ltimos 30 dias
    - Cobertura: Continente, A√ßores, Madeira
    - Filtragem por magnitude
    
    ### üè≠ Esta√ß√µes Meteorol√≥gicas
    - Lista de todas as esta√ß√µes
    - Observa√ß√µes das √∫ltimas 24 horas
    - Dados em tempo real
    
    ### üåæ Dados Agr√≠colas
    - Evapotranspira√ß√£o por concelho
    - Precipita√ß√£o por concelho
    - Temperaturas min/max por concelho
    - √çndice PDSI (seca)
    - Qualidade da √°gua (moluscos bivalves)
    
    Todos os dados s√£o obtidos diretamente da API oficial do IPMA com cache inteligente.
    """,
    version="2.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Incluir todos os routers
app.include_router(forecast.router)      # Previs√µes meteorol√≥gicas
app.include_router(warnings.router)     # Avisos meteorol√≥gicos
app.include_router(seismic.router)      # Dados s√≠smicos
app.include_router(marine.router)       # Dados mar√≠timos (mar, inc√™ndio, UV)
app.include_router(stations.router)     # Esta√ß√µes meteorol√≥gicas
app.include_router(agriculture.router)  # Dados agr√≠colas e qualidade √°gua


@app.get("/")
async def root():
    """Endpoint raiz com informa√ß√µes completas da API"""
    return {
        "message": "Weather API IPMA - Vers√£o Completa",
        "version": "2.0.0",
        "description": "API completa para TODOS os recursos do IPMA",
        "resources": {
            "meteorology": {
                "current_forecast": "/forecast/{distrito}/{localidade}",
                "forecast_by_date": "/forecast/{distrito}/{localidade}/?day=YYYY-MM-DD",
                "locations": "/forecast/{distrito}",
                "districts": "/forecast/"
            },
            "warnings": {
                "all_warnings": "/warnings/",
                "by_level": "/warnings/by-level/{level}"
            },
            "seismic": {
                "all_events": "/seismic/?region=continente|acores|madeira",
                "by_magnitude": "/seismic/magnitude/{min_magnitude}"
            },
            "marine": {
                "sea_state": "/marine/sea-state",
                "fire_risk": "/marine/fire-risk",
                "fire_risk_level": "/marine/fire-risk/level/{min_level}",
                "uv_index": "/marine/uv-index",
                "uv_by_level": "/marine/uv-index/level/{level}"
            },
            "stations": {
                "all_stations": "/stations/",
                "observations": "/stations/observations",
                "specific_station": "/stations/observations?station_id={id}",
                "latest": "/stations/observations/latest"
            },
            "agriculture": {
                "evapotranspiration": "/agriculture/evapotranspiration",
                "precipitation": "/agriculture/precipitation",
                "temperature_min": "/agriculture/temperature-min",
                "temperature_max": "/agriculture/temperature-max",
                "drought_index": "/agriculture/pdsi",
                "water_quality": "/agriculture/water-quality",
                "water_by_status": "/agriculture/water-quality/status/{status}"
            }
        },
        "examples": {
            "basic_forecast": "/forecast/lisboa/lisboa",
            "forecast_with_date": "/forecast/porto/porto/?day=2025-10-08",
            "weather_warnings": "/warnings/",
            "seismic_events": "/seismic/?region=continente",
            "fire_risk": "/marine/fire-risk",
            "uv_index": "/marine/uv-index",
            "weather_stations": "/stations/",
            "agricultural_data": "/agriculture/precipitation"
        },
        "total_endpoints": "25+ endpoints",
        "data_sources": [
            "Previs√µes meteorol√≥gicas at√© 5 dias",
            "Avisos meteorol√≥gicos at√© 3 dias",
            "Dados s√≠smicos √∫ltimos 30 dias",
            "Estado do mar at√© 3 dias",
            "Risco de inc√™ndio at√© 2 dias",
            "√çndice UV at√© 3 dias",
            "Observa√ß√µes esta√ß√µes 24h",
            "Dados agr√≠colas por concelho",
            "Qualidade da √°gua costeira"
        ]
    }


@app.get("/dashboard")
async def dashboard():
    """
    Dashboard completo com resumo de todos os dados dispon√≠veis

    Returns:
        Resumo executivo de todos os recursos da API
    """
    try:
        from app.services.ipma_service import IPMAService
        ipma_service = IPMAService()

        # Obter contadores de dados dispon√≠veis
        districts_count = len(ipma_service.get_districts_and_locations())
        warnings_count = len(ipma_service.get_weather_warnings())
        seismic_count = len(ipma_service.get_seismic_data())
        stations_count = len(ipma_service.get_weather_stations())

        return {
            "success": True,
            "dashboard": {
                "api_status": "üü¢ Online",
                "version": "2.0.0",
                "last_update": "2025-10-04",
                "data_summary": {
                    "districts_available": districts_count,
                    "active_warnings": warnings_count,
                    "recent_seismic_events": seismic_count,
                    "weather_stations": stations_count
                },
                "service_status": {
                    "meteorology": "üü¢ Ativo",
                    "warnings": "üü¢ Ativo",
                    "seismic": "üü¢ Ativo",
                    "marine": "üü¢ Ativo",
                    "stations": "üü¢ Ativo",
                    "agriculture": "üü¢ Ativo"
                },
                "coverage": {
                    "portugal_mainland": "‚úÖ Completa",
                    "azores": "‚úÖ Completa",
                    "madeira": "‚úÖ Completa",
                    "marine_areas": "‚úÖ Completa"
                },
                "data_freshness": {
                    "forecasts": "Atualizadas 4x/dia",
                    "warnings": "Tempo real",
                    "seismic": "√öltimos 30 dias",
                    "observations": "√öltimas 24 horas",
                    "agriculture": "Dados di√°rios"
                }
            },
            "quick_links": {
                "documentation": "/docs",
                "all_endpoints": "/",
                "health_check": "/health"
            }
        }

    except Exception as e:
        return {
            "success": False,
            "message": f"Erro ao gerar dashboard: {e}",
            "fallback_info": "Use /docs para documenta√ß√£o completa"
        }


@app.get("/health")
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de da API expandida"""
    try:
        from app.services.ipma_service import IPMAService
        ipma_service = IPMAService()

        # Teste r√°pido de conectividade
        test_districts = ipma_service.get_districts_and_locations()

        return {
            "status": "healthy",
            "message": "API IPMA Completa funcionando",
            "version": "2.0.0",
            "services": {
                "ipma_connection": "‚úÖ OK" if test_districts else "‚ùå Erro",
                "total_endpoints": "25+",
                "cache_status": "‚úÖ Ativo"
            },
            "timestamp": "2025-10-04T12:00:00Z"
        }

    except Exception as e:
        return {
            "status": "degraded",
            "message": f"API com problemas: {e}",
            "version": "2.0.0"
        }


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
